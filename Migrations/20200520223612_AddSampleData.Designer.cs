// <auto-generated />
using System;
using APBD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APBD.Migrations
{
    [DbContext(typeof(PrescriptionDbContext))]
    [Migration("20200518103411_AddSampleData")]
    partial class AddSampleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APBD.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "j@k.pl",
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            Id = 2,
                            Email = "j@n.com",
                            FirstName = "Jakub",
                            LastName = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ml@ml.pl",
                            FirstName = "Marcin",
                            LastName = "Log"
                        });
                });

            modelBuilder.Entity("APBD.Models.Medicament", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Medicaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "na bol",
                            Name = "apap",
                            Type = "lek"
                        },
                        new
                        {
                            Id = 2,
                            Description = "na bol glowy",
                            Name = "ibuprom",
                            Type = "lek"
                        },
                        new
                        {
                            Id = 3,
                            Description = "na odpornosc",
                            Name = "rutinoscorbin",
                            Type = "lek"
                        });
                });

            modelBuilder.Entity("APBD.Models.Patient", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ania",
                            LastName = "Kowalewska"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1998, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mateusz",
                            LastName = "Domb"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ignacy",
                            LastName = "Ignacewicz"
                        });
                });

            modelBuilder.Entity("APBD.Models.Prescription", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdDoctor");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 5, 18, 12, 34, 10, 975, DateTimeKind.Local).AddTicks(120),
                            DoctorId = 1,
                            DueDate = new DateTime(2020, 6, 18, 12, 34, 10, 977, DateTimeKind.Local).AddTicks(1860),
                            PatientId = 3
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 5, 18, 12, 34, 10, 977, DateTimeKind.Local).AddTicks(2940),
                            DoctorId = 2,
                            DueDate = new DateTime(2020, 6, 18, 12, 34, 10, 977, DateTimeKind.Local).AddTicks(2960),
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 5, 18, 12, 34, 10, 977, DateTimeKind.Local).AddTicks(2980),
                            DoctorId = 3,
                            DueDate = new DateTime(2020, 6, 18, 12, 34, 10, 977, DateTimeKind.Local).AddTicks(2990),
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("APBD.Models.Prescription_Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.HasKey("IdMedicament", "IdPrescription");

                    b.HasIndex("IdPrescription");

                    b.ToTable("Prescription_Medicament");

                    b.HasData(
                        new
                        {
                            MedicamentId = 3,
                            PrescriptionId = 1
                        },
                        new
                        {
                            MedicamentId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            MedicamentId = 1,
                            PrescriptionId = 3
                        });
                });

            modelBuilder.Entity("APBD.Models.Prescription", b =>
                {
                    b.HasOne("APBD.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APBD.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APBD.Models.Prescription_Medicament", b =>
                {
                    b.HasOne("APBD.Models.Medicament", "Medicament")
                        .WithMany("Prescription_Medicaments")
                        .HasForeignKey("IdMedicament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APBD.Models.Prescription", "Prescription")
                        .WithMany("Prescription_Medicaments")
                        .HasForeignKey("IdPrescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
